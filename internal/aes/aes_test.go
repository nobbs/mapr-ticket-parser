// Copyright (c) 2024-2025 Alexej Disterhoft
// Use of this source code is governed by a MIT license that can be found in the LICENSE file.
//
// SPDX-License-Identifier: MIT

package aes_test

import (
	"encoding/base64"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/nobbs/mapr-ticket-parser/internal/aes"
)

func TestAES_Decrypt(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name       string
		cipherText []byte
		want       []byte
		wantErr    bool
	}{
		{
			name:       "test 1",
			cipherText: []byte("WWup1XJ7wLYtrXA7vydwiorHLq2iqMvdLYa1qOCDqWE+qDtbAm0zYT1LZAqJ6NXNbgXXS+hP9vbcYTv69Fe+F3hJtBSPs6YHnd/b0T9hX7AyejyIJ/4RJ4ixjVpcl2Y9OMYKR28KjS7rV5sczOVLBf4kIVHa9PG0mRUopCOOK/HPsuaRSJRuvv1U5K9xUR+nND0cq6eN02PGVCsjERecNxtPgeHIdts3wDgld/JE2jWcWptNGwozmwqSAUym7VPNZNtjm67s+wXPSrjxvH69WcJmmpjJHpA="),
			want:       []byte{0x0a, 0x6d, 0x02, 0x08, 0x01, 0x7a, 0x77, 0x50, 0x0c, 0x72, 0x41, 0xa4, 0x1f, 0x34, 0x65, 0x9a, 0x66, 0xa5, 0xd7, 0xbf, 0xd8, 0x36, 0x31, 0x7d, 0xb8, 0x04, 0x3c, 0xe0, 0x63, 0x05, 0x94, 0xe0, 0x2c, 0xd9, 0xe8, 0xf3, 0x8e, 0x29, 0xd0, 0x8e, 0x58, 0xe4, 0xe6, 0x7b, 0x3e, 0xf5, 0x1d, 0x6d, 0xc4, 0xb5, 0x1f, 0x0b, 0xc6, 0x42, 0x33, 0x96, 0x9e, 0xc5, 0xf7, 0xa0, 0x84, 0xb7, 0x17, 0xa6, 0x6b, 0x18, 0xb7, 0x8d, 0x5b, 0x12, 0xb0, 0x41, 0x6f, 0x55, 0xb5, 0x01, 0xbb, 0x11, 0xc3, 0x99, 0x14, 0x5b, 0x47, 0x08, 0x53, 0x23, 0x72, 0x75, 0x94, 0xdd, 0x14, 0x86, 0xa3, 0xa7, 0x51, 0x9f, 0xc1, 0x27, 0x75, 0xf3, 0x9b, 0x31, 0x90, 0x5b, 0x5c, 0x04, 0x18, 0x26, 0x4b, 0x39, 0x43, 0x12, 0x22, 0x0a, 0x20, 0xb7, 0x89, 0x77, 0x71, 0x21, 0x4e, 0x0e, 0xf8, 0xa7, 0x21, 0x26, 0x14, 0xaf, 0xa0, 0xb7, 0xf7, 0x89, 0xcd, 0xf7, 0x0d, 0xe0, 0x6e, 0x0f, 0x98, 0xb2, 0x95, 0x78, 0x7c, 0x8b, 0xbe, 0xbe, 0x44, 0x1a, 0x11, 0x08, 0x88, 0x27, 0x10, 0x88, 0x27, 0x10, 0x00, 0x10, 0x89, 0x27, 0x22, 0x04, 0x6d, 0x61, 0x70, 0x72, 0x20, 0xe5, 0x90, 0x8e, 0xeb, 0xc5, 0xdb, 0xd1, 0x01, 0x28, 0xc9, 0xc3, 0x93, 0xd6, 0x05, 0x30, 0x00},
			wantErr:    false,
		},
		{
			name:       "test 2",
			cipherText: []byte("cj1FDarNNKh7f+hL5ho1m32RzYyHPKuGIPJzE/CkUqEfcTGEP4YJuFlTsBmHuifI5LvNob/Y4xmDsrz9OxrBnhly/0g9xAs5ApZWNY8Rcab8q70IBYIbpu7xsBBTAiVRyLJkAtGFXNn104BB0AsS55GbQFUN9NAiWLzZY3/X1ITfGfDEGaYbWWTb1LGx6C0Jjgnr7TzXv1GqwiASbcUQCXOx4inguwMneYt9KhOp89smw6GBKP064DfIMHHR6lgv0XhBP6d9FVJ1QWKvcccvi2F3LReBtqA="),
			want:       []byte{0x0a, 0x6d, 0x02, 0x08, 0x01, 0x1f, 0xe3, 0x7a, 0x6c, 0x21, 0x79, 0x4c, 0x43, 0x14, 0x91, 0xa7, 0x87, 0xa3, 0xb2, 0x07, 0x61, 0x46, 0xb0, 0xca, 0xb7, 0xf8, 0x9d, 0xcc, 0xf8, 0x25, 0xd1, 0xa3, 0xee, 0xeb, 0xa9, 0x0f, 0x99, 0x65, 0xe2, 0xf6, 0x36, 0x75, 0xd8, 0x9b, 0x6f, 0xfe, 0x2b, 0x05, 0x4d, 0x61, 0xa1, 0xbd, 0x9a, 0x32, 0x16, 0x48, 0xc1, 0xd2, 0x5a, 0x90, 0xa8, 0x28, 0x07, 0x12, 0x62, 0xe1, 0xf5, 0xa4, 0xc9, 0x75, 0x51, 0x0a, 0x3f, 0xeb, 0x8a, 0x10, 0xd6, 0x78, 0x1a, 0x08, 0x9e, 0xcc, 0xf0, 0xd4, 0xd8, 0xba, 0xa2, 0xfc, 0x2a, 0x3b, 0xb4, 0x37, 0xb3, 0xc9, 0x2f, 0x9f, 0xb4, 0x08, 0x57, 0xef, 0x32, 0x26, 0x58, 0xa5, 0x08, 0x23, 0x4c, 0xd4, 0x36, 0x70, 0x57, 0x12, 0x22, 0x0a, 0x20, 0x28, 0xf3, 0x52, 0x11, 0xcf, 0x7a, 0x7a, 0xe2, 0x85, 0x72, 0x9e, 0x43, 0x2d, 0xcd, 0x20, 0x6d, 0xfb, 0x8b, 0xac, 0x20, 0xe8, 0x95, 0xa4, 0x85, 0x21, 0x00, 0x49, 0xcd, 0x6f, 0x18, 0x49, 0x86, 0x1a, 0x0f, 0x08, 0x88, 0x27, 0x10, 0x88, 0x27, 0x10, 0xe8, 0x07, 0x22, 0x04, 0x6d, 0x61, 0x70, 0x72, 0x20, 0xfd, 0xe5, 0xaf, 0xe3, 0x05, 0x28, 0xfd, 0xfb, 0xe5, 0xe2, 0x05, 0x30, 0x80, 0x9a, 0x9e, 0x01, 0x38, 0x01},
			wantErr:    false,
		},
		{
			name:       "test 3",
			cipherText: []byte("WWup1XJ7wLYtrXA7vydwiorHLq2iqMvdLYa1qOCDqWE+qDtbAm0zYT1LZAqJ6NXNbgXXS+hP9vbcYTv69Fe+F3hJtBSPs6YHnd/b0T9hX7AyejyIJ/4RJ4ixjVpcl2Y9OMYKR28KjS7rV5sczOVLBf4kIVHa9PG0mRUopCOOK/HPsuaRSJRuvv1U5K9xUR+nND0cq6eN02PGVCsjERecNxtPgeHIdts3wDgld/JE2jWcWptNGwozmwqSAUym7VPNZNtjm67s+wXPSrjxvH69WcJmmpjJHpA="),
			want:       []byte{0x0a, 0x6d, 0x02, 0x08, 0x01, 0x7a, 0x77, 0x50, 0x0c, 0x72, 0x41, 0xa4, 0x1f, 0x34, 0x65, 0x9a, 0x66, 0xa5, 0xd7, 0xbf, 0xd8, 0x36, 0x31, 0x7d, 0xb8, 0x04, 0x3c, 0xe0, 0x63, 0x05, 0x94, 0xe0, 0x2c, 0xd9, 0xe8, 0xf3, 0x8e, 0x29, 0xd0, 0x8e, 0x58, 0xe4, 0xe6, 0x7b, 0x3e, 0xf5, 0x1d, 0x6d, 0xc4, 0xb5, 0x1f, 0x0b, 0xc6, 0x42, 0x33, 0x96, 0x9e, 0xc5, 0xf7, 0xa0, 0x84, 0xb7, 0x17, 0xa6, 0x6b, 0x18, 0xb7, 0x8d, 0x5b, 0x12, 0xb0, 0x41, 0x6f, 0x55, 0xb5, 0x01, 0xbb, 0x11, 0xc3, 0x99, 0x14, 0x5b, 0x47, 0x08, 0x53, 0x23, 0x72, 0x75, 0x94, 0xdd, 0x14, 0x86, 0xa3, 0xa7, 0x51, 0x9f, 0xc1, 0x27, 0x75, 0xf3, 0x9b, 0x31, 0x90, 0x5b, 0x5c, 0x04, 0x18, 0x26, 0x4b, 0x39, 0x43, 0x12, 0x22, 0x0a, 0x20, 0xb7, 0x89, 0x77, 0x71, 0x21, 0x4e, 0x0e, 0xf8, 0xa7, 0x21, 0x26, 0x14, 0xaf, 0xa0, 0xb7, 0xf7, 0x89, 0xcd, 0xf7, 0x0d, 0xe0, 0x6e, 0x0f, 0x98, 0xb2, 0x95, 0x78, 0x7c, 0x8b, 0xbe, 0xbe, 0x44, 0x1a, 0x11, 0x08, 0x88, 0x27, 0x10, 0x88, 0x27, 0x10, 0x00, 0x10, 0x89, 0x27, 0x22, 0x04, 0x6d, 0x61, 0x70, 0x72, 0x20, 0xe5, 0x90, 0x8e, 0xeb, 0xc5, 0xdb, 0xd1, 0x01, 0x28, 0xc9, 0xc3, 0x93, 0xd6, 0x05, 0x30, 0x00},
			wantErr:    false,
		},
		{
			name:       "test 4",
			cipherText: []byte("IGem6fUksZ1pd4iut978SKElS4ktecRsAkrl+qwPYc7xhfMg4wkwALKDmFmpc8Xvrm1L9Et0jVBoyhCWMDCjhToZ8b6FsfCn8wdCOB0MWm9CRobGv7MDsoEO2TQ5Bnh8i/VfuthKFxd3Om9iZPVCI4I1S9h4p/77Al1GzTGcfFFf1g9fq1HXftT9TEDyLdABIyATJbzv8zD10IDT8P1f8nxl7lgT/7ZhGz7N24vSz6jBxHE7oHmvHzjW22xJwt7TJgvrP21boH9HTsTPiKZOpQMZ4zFo6JA4aNVlQQ0="),
			want:       []byte{0x0a, 0x6f, 0x02, 0x08, 0x01, 0xdb, 0x67, 0x39, 0x6c, 0x31, 0x48, 0x56, 0xf2, 0x28, 0x29, 0xfe, 0x78, 0x9d, 0xa5, 0x56, 0xcb, 0x88, 0xce, 0x46, 0xf8, 0x24, 0x1e, 0x61, 0x89, 0x84, 0xac, 0x4d, 0xb9, 0xd5, 0x03, 0x12, 0x9e, 0x15, 0x30, 0xea, 0xdd, 0x95, 0xf9, 0x4d, 0xc9, 0x7c, 0x5c, 0x8e, 0xca, 0x37, 0x3e, 0xeb, 0x83, 0xcb, 0xb9, 0x31, 0xb8, 0x69, 0xea, 0x16, 0x2b, 0xae, 0x80, 0x12, 0x75, 0x47, 0xa8, 0x0c, 0xbd, 0x97, 0xd8, 0x45, 0xd8, 0x0b, 0xf2, 0x90, 0x9d, 0x82, 0xbc, 0xde, 0x96, 0x5d, 0xbb, 0x70, 0xd4, 0xf1, 0xdb, 0x39, 0xb7, 0x94, 0xab, 0x7a, 0x84, 0xa3, 0xb4, 0xd8, 0xc2, 0x87, 0x13, 0x9b, 0xae, 0x75, 0x3f, 0xce, 0x5b, 0x3a, 0x35, 0xfe, 0x5f, 0x04, 0x08, 0xdc, 0x08, 0x12, 0x22, 0x0a, 0x20, 0xcc, 0x19, 0x21, 0xef, 0x18, 0xd7, 0xf8, 0x3a, 0xa1, 0x12, 0x01, 0xde, 0x26, 0xdf, 0xdf, 0x6d, 0x1d, 0xba, 0x40, 0xad, 0xa9, 0x0d, 0xf3, 0x1a, 0xaf, 0x90, 0xa0, 0xfb, 0x4c, 0x75, 0x69, 0x92, 0x1a, 0x11, 0x08, 0x88, 0x27, 0x10, 0x88, 0x27, 0x10, 0x8b, 0x27, 0x10, 0x00, 0x22, 0x04, 0x6d, 0x61, 0x70, 0x72, 0x20, 0x8e, 0xe8, 0xac, 0x84, 0x06, 0x28, 0x8e, 0xfe, 0xe2, 0x83, 0x06, 0x30, 0x80, 0x9a, 0x9e, 0x01, 0x38, 0x01, 0x60, 0x01},
			wantErr:    false,
		},
	}

	for _, tt := range tests {
		tt := tt

		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			aes, err := aes.New()
			require.NoError(t, err)

			got, err := aes.Decrypt(base64Decode(t, tt.cipherText))
			assert.Equal(t, tt.wantErr, err != nil, "Decrypt() error = %v, wantErr %v", err, tt.wantErr)

			assert.Equal(t, tt.want, got)
		})
	}
}

func TestAES_Roundtrips(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name  string
		plain []byte
		nonce []byte
	}{
		{
			name:  "test 1",
			plain: []byte("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
			nonce: []byte("aaaaaaaaaaaaaaaa"),
		},
		{
			name:  "test 2",
			plain: []byte("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"),
			nonce: []byte("acbdefghijklmnop"),
		},
	}

	for _, tt := range tests {
		tt := tt

		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			opts := []aes.AESOption{}

			if tt.nonce != nil {
				mockRandReader := NewMockRandReader(tt.nonce)
				opts = append(opts, aes.WithRand(mockRandReader))
			}

			aes, err := aes.New(opts...)
			require.NoError(t, err)

			enc, err := aes.Encrypt(tt.plain)
			assert.NoError(t, err)

			dec, err := aes.Decrypt(enc)
			assert.NoError(t, err)
			assert.Equal(t, tt.plain, dec)

			enc2, err := aes.Encrypt(tt.plain)
			assert.NoError(t, err)
			assert.Equal(t, enc, enc2)

			dec2, err := aes.Decrypt(enc2)
			assert.NoError(t, err)
			assert.Equal(t, tt.plain, dec2)
		})
	}
}

// mockRandReader is a randReader that returns a fixed
type mockRandReader struct {
	// value to write to the byte slice
	p []byte
}

// NewMockRandReader returns a new mockRandReader that returns the given value
// when Read is called.
func NewMockRandReader(p []byte) *mockRandReader {
	return &mockRandReader{
		p: p,
	}
}

// Read implements the randReader interface by writing the given value to the
// given byte slice.
func (r *mockRandReader) Read(p []byte) (n int, err error) {
	copy(p, r.p)
	return len(r.p), nil
}

// base64Decode decodes the given base64 encoded byte slice.
func base64Decode(t *testing.T, b []byte) []byte {
	t.Helper()

	decoded := make([]byte, base64.StdEncoding.DecodedLen(len(b)))
	n, err := base64.StdEncoding.Decode(decoded, b)
	require.NoError(t, err)

	return decoded[:n]
}
